// Made by Austin Fritz and  Austin Piper

#include <iostream>
#include <string>
using namespace std;

class Person
{
public:
	string returnName()
	{
		return p_name;
	}
	string returnAddress()
	{
		return p_address;
	}
	int returnPhoneNo()
	{
		return p_phoneNumber;
	}

protected:
	string p_address;
	string p_name;
	int p_phoneNumber;
	string address;
	int phoneNumber;
	string GetName()
	{
		return p_name;
	}
	void SetName(const string& name)
	{
		p_name = name;
	}

	string getAddress()
	{
		return p_address;
	}
	void SetAddress(const string& name)
	{
		p_address = address;
	}
	int getPhoneNumber()
	{
		return p_phoneNumber;
	}
	void SetPhoneNumber(const string& name)
	{
		p_phoneNumber = phoneNumber;
	}

};
class Customer :public Person
{
protected:
	int transaction;
	float credit;
	
	void displayInfo()
	{
		cout << p_name << endl << p_address << endl << "Number of transactions: " << transaction << "." << endl << "Current Credit: " << credit << ".";
	}
	void adjustCredit(float value, float adjustment)
	{
		credit += adjustment;
	}
	
	void addTransaction()
	{
		transaction++;
	}

	float Credit()
	{

		return credit;
	}
	int Transactions()
	{

		return transaction;
	}
};
class Employee : public Person
{
public:
	void setWage()
	{
		float bonus;
		cout << "Enter the wage increase: ";
		cin >> bonus;
		wage += bonus;
	}
	void increaseMonthWorked()
	{
		months++;
	}
	void updateJobTitle()
	{
		cout << "Enter new job title: ";
		string newTitle;
		cin >> newTitle;
		job = newTitle;
	}
	void underlings()
	{
		Employee Employees[3];
	}
	int amountOfUnderlings = 1;

	void addUnderling(Employee newUnderling)
	{
			//Employees[amountOfUnderlings] = newUnderling;
			amountOfUnderlings++;
	}
	void displayUnderling()
	{
		for (int i = 0; i < amountOfUnderlings; i++)
		{
		//	cout << Employees[i] << endl;
		}
	}
	
protected:

	float wage;
	int months;
	string job;
	

	float setwage()
	{
		return wage;
	}
	int MonthsWorked()
	{
		return months;
	}
	string Job()
	{
		return job;
	}


};

int main()
{
	Customer customers[5];
	Employee Manager;
	Employee assistantManger;
	Employee Coordinator;
	Employee Sales;
	Manager.updateJobTitle();
	Manager.setWage();
	Manager.increaseMonthWorked();

	assistantManger.updateJobTitle();
	assistantManger.setWage();
	assistantManger.increaseMonthWorked();

	Coordinator.updateJobTitle();
	Coordinator.setWage();
	Coordinator.increaseMonthWorked();

	Sales.updateJobTitle();
	Sales.setWage();
	Sales.increaseMonthWorked();

	return 0;
}
